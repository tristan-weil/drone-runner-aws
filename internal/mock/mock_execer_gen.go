// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tristan-weil/drone-runner-aws/runtime (interfaces: Execer)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	pipeline "github.com/drone/runner-go/pipeline"
	gomock "github.com/golang/mock/gomock"
	engine "github.com/tristan-weil/drone-runner-aws/engine"
	reflect "reflect"
)

// MockExecer is a mock of Execer interface
type MockExecer struct {
	ctrl     *gomock.Controller
	recorder *MockExecerMockRecorder
}

// MockExecerMockRecorder is the mock recorder for MockExecer
type MockExecerMockRecorder struct {
	mock *MockExecer
}

// NewMockExecer creates a new mock instance
func NewMockExecer(ctrl *gomock.Controller) *MockExecer {
	mock := &MockExecer{ctrl: ctrl}
	mock.recorder = &MockExecerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecer) EXPECT() *MockExecerMockRecorder {
	return m.recorder
}

// Exec mocks base method
func (m *MockExecer) Exec(arg0 context.Context, arg1 *engine.Spec, arg2 *pipeline.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec
func (mr *MockExecerMockRecorder) Exec(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockExecer)(nil).Exec), arg0, arg1, arg2)
}
